plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

def args = [
        // Java16的ZGC似乎有大幅度优化
        "-XX:+UseZGC",
        // 当遇到空指针异常时显示更详细的信息
        "-XX:+ShowCodeDetailsInExceptionMessages",
        "-Dsun.java2d.opengl=true",
        // 不添加此参数，打包成exe后，https协议的网络图片资源无法加载
        "-Dhttps.protocols=TLSv1.1,TLSv1.2",
//            "--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED"

        "--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED",
        // "--illegal-access=warn",
        "--add-opens=javafx.controls/javafx.scene.control.skin=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
        //the next line changes everything.
        "--add-opens=java.base/java.lang.reflect=com.jfoenix",
        "--add-opens=com.jfoenix/com.jfoenix.skins=com.example.jfoenixtest",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.example.jfoenixtest",
        "--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=com.example.jfoenixtest",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.example.jfoenixtest",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.inputmap=com.example.jfoenixtest",

        "--add-exports=javafx.controls/javafx.scene.control.skin=com.jfoenix",
        "--add-exports=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-exports=java.base/java.lang.reflect=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED",

        "--add-exports=javafx.controls/com.sun.javafx.binding=com.jfoenix",
        "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-exports=javafx.base/com.sun.javafx.event=com.jfoenix",
]

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.example.jfoenixtest'
    mainClass = 'com.example.jfoenixtest.HelloApplication'
    applicationDefaultJvmArgs = args
    applicationName = "测试"
}

javafx {
    version = '17.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.1')
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')

    implementation 'com.jfoenix:jfoenix:9.0.10'
}

run {
    jvmArgs = args
}

jlink {
    imageZip = project.file("${buildDir}/distributions/${application.applicationName}-${javafx.platform.classifier}.zip") as RegularFile
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = application.applicationName
        imageName.set(application.applicationName)
        jvmArgs = args
    }
    jpackage {
        outputDir = "build-package"
        imageOutputDir = file("$buildDir/$outputDir/image")
        installerOutputDir = file("$buildDir/$outputDir/installer")
        imageName = application.applicationName
        skipInstaller = true
        installerName = application.applicationName
        appVersion = version.toString()

        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            // icon = "src/main/resources/images/application.ico"
            installerOptions += ["--win-dir-chooser", "--win-menu", "--win-shortcut", "--win-menu-group", application.applicationName]
        }
        if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            // icon = "src/main/resources/images/application.icns"
        }
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            // icon = "src/main/resources/images/application.png"
            installerType = "deb"
            installerOptions += ["--linux-deb-maintainer", "icuxika@outlook.com", "--linux-menu-group", application.applicationName, "--linux-shortcut"]
        }
    }
}

jlinkZip {
    group = 'distribution'
}